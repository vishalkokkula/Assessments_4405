# -*- coding: utf-8 -*-
"""Fare pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jRWrGlIeEI4Ha6QFT7eWsUB9-IYRdLoZ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import accuracy_score,r2_score,precision_score,recall_score

"""# load data"""

df = pd.read_csv('/content/Fare prediction.csv')
df

"""# data preprocessing"""

df.info()

df.isnull().sum()

df.duplicated().sum()

def outliers_iqr(df):
    q1 = np.percentile(df, 25)
    q3 = np.percentile(df, 75)
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = [x for x in df if x < lower_bound or x > upper_bound]
    return outliers
numerical_columns = df.select_dtypes(include=[np.number])
outliers_dict = {}
for col in numerical_columns.columns:
    outliers_dict[col] = outliers_iqr(df[col])
for col, outliers in outliers_dict.items():
    print("Outliers in column '{}': {}".format(col, outliers))

"""#EDA"""

df.shape

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numerical_columns].corr()
print(correlation_matrix)

#heat map
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

#scatter
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

# histograms
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# bar charts
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

"""# model training and testing"""

df.head()

X = df.drop(['fare_amount','pickup_datetime','key'],axis = 1)
y = df['fare_amount']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state=42)

lr = LinearRegression()
lr.fit(X_train,y_train)

y_pred = lr.predict(X_test)

"""# metrics"""

from sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error
r_square = r2_score(y_test,y_pred)
mae = mean_absolute_error(y_test,y_pred)
mse = mean_squared_error(y_test,y_pred)

print("R Squared: ", r_square)
print("RMSE: ",mse)