# -*- coding: utf-8 -*-
"""LVADSUSR197_lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AFgR_BrTrqeSV32pBpPPIbaNVPFGYGD5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/Mall_Customers.csv')
df

df.info()

df.shape

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

df['ratio spendings_income'] = df[df['Spending Score (1-100)']/ df['Annual Income (k$)']]

df.columns

df.drop('CustomerID',axis=1)

le = LabelEncoder()
df['Gender']= le.fit_transform(df['Gender'])
df

scaler = StandardScaler()
X = scaler.fit_transform(df)

# elbow
import pandas as pd

from sklearn.preprocessing import StandardScaler,MinMaxScaler,LabelEncoder
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.xticks(range(1, 11))
plt.grid(True)
plt.show()

# Silhouette score

from sklearn.metrics import silhouette_score
sse = []
sil_score=[]
k_nrg=range(1,10)
for k in range(1,10):
   kmeans = KMeans(n_clusters=k)
   kmeans.fit(df)
   sse.append(kmeans.inertia_)
   if k>=2:
    x=silhouette_score(df, kmeans.fit_predict(df))
    sil_score.append(x)
plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(sse)
plt.show()
plt.xlabel('K')
plt.ylabel('Silhouette Score')
plt.plot(range(2,10),sil_score,color='red')
plt.show()

# clustering

n_clusters = 3
kmeans = KMeans(n_clusters=n_clusters, init='k-means++', random_state=42)
kmeans.fit(X)

df['Cluster'] = kmeans.labels_

# cluster plotting

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

centroids = kmeans.cluster_centers_
centroids_pca = pca.transform(centroids)
plt.figure(figsize=(10, 6))
for cluster in range(n_clusters):
    plt.scatter(X_pca[df['Cluster'] == cluster, 0], X_pca[df['Cluster'] == cluster, 1], label=f'Cluster {cluster}')
plt.scatter(centroids_pca[:, 0], centroids_pca[:, 1], color='purple', marker='*', label='Centroid')
plt.title('Clustering of Countries (PCA)')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend()
plt.grid(True)
plt.show()