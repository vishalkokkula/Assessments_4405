# -*- coding: utf-8 -*-
"""Lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TRpb2ChvvBR4oRiLXskXGwhN5ymH-lzs
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
# import statsmodels.api as sm
from sklearn.preprocessing import MinMaxScaler,StandardScaler

df = pd.read_csv('/content/expenses.csv')
df

df.info()

# -- 1 (a)

df.isnull().sum()

# 16 null values in 'bmi' column

df.dropna(inplace=True)

# -- 1 (b)
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

# -- 2 (a)

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
cols = ['sex','smoker', 'region']
for col in cols:
  df[col]= encoder.fit_transform(df[col])

df

# -- 3(a)

# every feature is imp!!!

# -- 3 (b)

duplicated_rows = df[df.duplicated(keep=False)]
print(duplicated_rows)

df = df.drop_duplicates()

df.duplicated().sum()

df.columns

# -- 4 (a)

X = df.drop('charges',axis = 1)
y = df['charges']
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)
len(X_train), len(X_test), len(y_train), len(y_test)

# -- 5 (a)

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(X_train,y_train)

y_pred = lr.predict(X_test)

# -- 6(a)

from sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error
r_square = r2_score(y_test,y_pred)
mae = mean_absolute_error(y_test,y_pred)
mse = mean_squared_error(y_test,y_pred)

print("R Squared: ", r_square)
print("RMSE: ",mse)





# Plot histograms for numerical columns
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()


# Plot bar charts for categorical columns
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()


# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()


# Generate scatter plots for pairs of numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()