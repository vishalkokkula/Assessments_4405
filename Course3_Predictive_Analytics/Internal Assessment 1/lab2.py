# -*- coding: utf-8 -*-
"""lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MWZ_vhhS0Y8pZCAjJ773UosjXKkCmrxe
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import metrics #accuracy, f1 score, precision.....
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,classification_report, confusion_matrix, roc_curve, auc
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder, LabelEncoder


bdf = pd.read_csv('/content/booking.csv')
bdf

# -- 1(a)
bdf.info()

# has missing values in room type, average price!
bdf.isnull().sum()

bdf.dropna(inplace=True)

# -- 1 (b) --Outlier detection:

numerical_columns = bdf.select_dtypes(include=['float64', 'int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=bdf[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

bdf = bdf.drop('Booking_ID', axis = 1)
bdf

bdf.columns

# 2(a)
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
cols = ['type of meal','room type', 'lead time', 'market segment type', 'repeated', 'P-C',
       'P-not-C', 'average price', 'date of reservation','booking status']
for col in cols:
  bdf[col]= encoder.fit_transform(bdf[col])

# 3(a)

# except booking id every feature is imp!!!

# 3(b) ---- removed duplicates!!

bdf.duplicated().sum()
bdf = bdf.drop_duplicates()

bdf.duplicated().sum()

bdf.columns

# 4 (a)

X = bdf.drop('booking status',axis=1)
y = bdf['booking status']

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

# 5 (a)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train,y_train)
y_pred = model.predict(X_test)
y_pred

# 6 (a)
from sklearn.metrics import accuracy_score

acc = accuracy_score(y_test,y_pred)
acc


from sklearn.metrics import confusion_matrix

conf_matrix = confusion_matrix(y_test,y_pred)
conf_matrix